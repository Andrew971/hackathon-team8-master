AWSTemplateFormatVersion: "2010-09-09"
Description: Create a Docker CI/CD pipeline with CodePipeline, CodeBuild and ECR
Parameters:

  ApiName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  CognitoPoolID:
    Default: generic-project-name
    Description: The name for the project associated with this pipeline (used to namespace resources)
    Type: String
  CognitoClientID:
    Default: generic-project-name
    Description: The name for the project associated with this pipeline (used to namespace resources)
    Type: String
  ApiKeySourceType:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  
  ApiEndpointConfigType:
    Type: CommaDelimitedList
    Description: Stack Name (injected by Stackery at deployment time)

  StageName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

  AuthorizerFunctionName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

  AuthorizerFunctionDescription:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

  AuthorizerFunctionHandler:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

  AuthorizerFunctionMemorySize:
    Type: Number
    Description: the value of the memory size you want to use for this lambda.
    Default: 128
    AllowedValues:
      - 128
      - 640
      - 1280
      - 1792
      - 2048

  AuthorizerFunctionRuntimeVersion:
    Type: String
    Description: Version Of Node Js
    AllowedValues: 
      - nodejs12.x

  AuthorizerFunctionTimeout:
    Type: Number
    Description: the value of the timeout you want to give to this lambda.
    Default: 3

  ServiceTag:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

  ApplicationTag:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

  ApiTypeTag:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

  PathRole:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

  # CertificateArn: 
  #   Type: String
  #   Description: Name of your Api.
  #   MaxLength: 450
  #   MinLength: 5
  # ApiDomainNameParam: 
  #   Type: String
  #   Description: Description of your Api.
  #   MaxLength: 450
  #   MinLength: 5
  # HostedZoneId: 
  #   Type: String
  #   Description: Description of your Api.
  #   MaxLength: 450
  #   MinLength: 5

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Settings"
        Parameters:
          - ServiceTag
          - ApplicationTag
          - ApiTypeTag
          - PathRole
      - Label:
          default: "RestApi Settings"
        Parameters:
          - ApiName
          - StageName
          - ApiKeySourceType
          - ApiEndpointConfigType
      # - Label:
      #     default: "Custom Settings"
      #   Parameters:
      #     - CertificateArn
      #     - ApiDomainNameParam
      - Label:
          default: "Authorizer Settings"
        Parameters:
          - AuthorizerFunctionName
          - AuthorizerFunctionDescription
          - AuthorizerFunctionHandler
          - AuthorizerFunctionMemorySize
          - AuthorizerFunctionRuntimeVersion
          - AuthorizerFunctionTimeout

Resources:

  RestApiAccount: 
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt RestApiCloudWatchLogsRole.Arn

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: !Sub
        - ${ResourceName} From Stack ${ApiName}
        - ResourceName: RestApi
      Name: !Ref ApiName
      FailOnWarnings: true
      BinaryMediaTypes:
        - 'image~1png'
        - 'image~1webp'
        - 'text~1*'
      ApiKeySourceType: !Ref ApiKeySourceType
      EndpointConfiguration:
        Types: !Ref ApiEndpointConfigType

  RestApiCloudWatchLogsRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - apigateway.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies: 
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: '*'
                
  # RestApiDeploymentV1:
  #   Type: AWS::ApiGateway::Deployment
  #   DeletionPolicy: Retain
  #   Properties:
  #     RestApiId: !Ref RestApi
  #     Description: "First deployment"

  # RestApiStage:
  #   Type: AWS::ApiGateway::Stage
  #   Properties:
  #     RestApiId: !Ref RestApi
  #     StageName: !Ref StageName
  #     DeploymentId: !Ref RestApiDeploymentV1
  #     MethodSettings:
  #       - CacheDataEncrypted: false
  #         CacheTtlInSeconds: 3600
  #         CachingEnabled: true
  #         DataTraceEnabled: true
  #         HttpMethod: '*'
  #         LoggingLevel: INFO
  #         ResourcePath: /*
  #     Variables: 
  #       JWT_TOKEN: "test"
  #       COGNITO_POOL_ID: !Ref CognitoPoolID
  #       COGNITO_CLIENT_ID: !Ref CognitoClientID

  UserResource: 
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: ./rest-resource.yaml
      Parameters: 
        RestApiID: !Ref RestApi
        ResourceID: !GetAtt RestApi.RootResourceId
        ResourceName: user

  UserIdResource: 
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: ./rest-resource.yaml
      Parameters: 
        RestApiID: !Ref RestApi
        ResourceID: !GetAtt UserResource.RootResourceId
        ResourceName: {userId}

  Authorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties: 
      RestApiId: !Ref RestApi
      AuthorizerCredentials: !GetAtt AuthorizerRole.Arn
      # AuthorizerResultTtlInSeconds: 3600
      Type: REQUEST
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunctionAlias}/invocations
      IdentitySource: method.request.header.Token
      Name: !Sub ${ApiName}-Authorizer

  AuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - sts:AssumeRole
      Policies: 
        - 
          PolicyName: !Sub ${ApiName}-InvokeAuthorizerFunction
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: 
                  - !GetAtt AuthorizerFunction.Arn
                  - !Ref AuthorizerFunctionAlias

  AuthorizerFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Ref AuthorizerFunctionName
      Code: ../../src/RestApiAuthorizer/build
      Description: !Ref AuthorizerFunctionDescription
      Handler: !Ref AuthorizerFunctionHandler
      MemorySize: !Ref AuthorizerFunctionMemorySize
      Role: !GetAtt AuthorizerFunctionRole.Arn
      Runtime: !Ref AuthorizerFunctionRuntimeVersion
      Timeout: !Ref AuthorizerFunctionTimeout
      Environment: 
          Variables: 
            JWT_TOKEN_FUNC: "test"
      Tags: 
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: ApiType
          Value: !Ref ApiTypeTag
        - Key: Resource
          Value: Authorizer-Lambda
  
  AuthorizerFunctionVersionV1:
    DeletionPolicy: Retain
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref AuthorizerFunction
      Description : first commit.

  AuthorizerFunctionAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionVersion: !GetAtt AuthorizerFunctionVersionV1.Version
      FunctionName: !Ref AuthorizerFunction
      Name: !Sub ${AuthorizerFunctionName}-V1

  AuthorizerFunctionPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:invokeFunction
      FunctionName: !Ref AuthorizerFunctionAlias
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*

  AuthorizerFunctionRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
              - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies: 
        - PolicyName: !Sub ${AuthorizerFunctionName}-policy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                  - logs:*
                Resource: !Sub arn:aws:logs:${AWS::Region}:*:log-group:/aws/lambda/*:*:*
              - Effect: Allow
                Action: 
                  - sns:Publish
                Resource: "arn:aws:sns:*:*:*"
      Path: !Ref PathRole
      RoleName: !Sub ${AuthorizerFunctionName}-role

  # ApiDomain: 
  #   Type: AWS::ApiGateway::DomainName
  #   Properties: 
  #     CertificateArn: !Ref CertificateArn
  #     DomainName: !Ref ApiDomainNameParam

  # ApiBasePath: 
  #   Type: AWS::ApiGateway::BasePathMapping
  #   Properties:
  #     DomainName: !Ref ApiDomain
  #     RestApiId: !Ref RestApi
  #     # Stage : !Ref RestApiStage
  #     # BasePath: v2

  # ApiDNSRecord:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     HostedZoneId: !Ref HostedZoneId
  #     RecordSets:
  #     - Name: !Ref ApiDomain
  #       Type: A
  #       AliasTarget:
  #         HostedZoneId: !GetAtt ApiDomain.DistributionHostedZoneId
  #         DNSName: !GetAtt ApiDomain.DistributionDomainName
Outputs:

  ApiLogicalId:
    Value: !Ref RestApi

  # ApiV1EndpointUrl:
  #   Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${RestApiStage}

  ApiRootResource:
    Value: !GetAtt RestApi.RootResourceId
  UserResource:
    Value: !GetAtt UserIdResource.Outputs.ApiResourceID

  # DeploymentLogicalId:
  #   Value: !Ref RestApiDeploymentV1

  # StageLogicalId:
  #   Value: !Ref RestApiStage

  AuthorizerLogicalId:
    Value: !Ref Authorizer
